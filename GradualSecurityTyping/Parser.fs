// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"


open Syntax

let private mkApply t ts =
    List.fold (fun t arg -> TermApply (t, arg)) t ts


# 15 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | RPAREN
  | LPAREN
  | SEMICOLON
  | IN
  | LET
  | ELSE
  | THEN
  | IF
  | GREATER
  | LESS
  | EQUAL
  | DIV
  | MULT
  | PLUS
  | MINUS
  | SEMI_COLON of (Syntax.Position)
  | BACK_DASH
  | ARROW
  | DOT
  | HASH_STRING
  | HASH_PRINT
  | DOUBLE_ARROW of (Syntax.Position)
  | ANGLE
  | EXCL
  | LEVEL of (SecurityLevel)
  | STRING of (string)
  | TYPE_IDENT of (string)
  | IDENT of (string)
  | INT of (int)
  | BOOL of (bool)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_RPAREN
    | TOKEN_LPAREN
    | TOKEN_SEMICOLON
    | TOKEN_IN
    | TOKEN_LET
    | TOKEN_ELSE
    | TOKEN_THEN
    | TOKEN_IF
    | TOKEN_GREATER
    | TOKEN_LESS
    | TOKEN_EQUAL
    | TOKEN_DIV
    | TOKEN_MULT
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_SEMI_COLON
    | TOKEN_BACK_DASH
    | TOKEN_ARROW
    | TOKEN_DOT
    | TOKEN_HASH_STRING
    | TOKEN_HASH_PRINT
    | TOKEN_DOUBLE_ARROW
    | TOKEN_ANGLE
    | TOKEN_EXCL
    | TOKEN_LEVEL
    | TOKEN_STRING
    | TOKEN_TYPE_IDENT
    | TOKEN_IDENT
    | TOKEN_INT
    | TOKEN_BOOL
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startprogram
    | NONTERM_program
    | NONTERM_term
    | NONTERM_simple_term
    | NONTERM_raw_value
    | NONTERM_labeled_value
    | NONTERM_constant
    | NONTERM_raw_type
    | NONTERM_labeled_type
    | NONTERM_args

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | RPAREN  -> 1 
  | LPAREN  -> 2 
  | SEMICOLON  -> 3 
  | IN  -> 4 
  | LET  -> 5 
  | ELSE  -> 6 
  | THEN  -> 7 
  | IF  -> 8 
  | GREATER  -> 9 
  | LESS  -> 10 
  | EQUAL  -> 11 
  | DIV  -> 12 
  | MULT  -> 13 
  | PLUS  -> 14 
  | MINUS  -> 15 
  | SEMI_COLON _ -> 16 
  | BACK_DASH  -> 17 
  | ARROW  -> 18 
  | DOT  -> 19 
  | HASH_STRING  -> 20 
  | HASH_PRINT  -> 21 
  | DOUBLE_ARROW _ -> 22 
  | ANGLE  -> 23 
  | EXCL  -> 24 
  | LEVEL _ -> 25 
  | STRING _ -> 26 
  | TYPE_IDENT _ -> 27 
  | IDENT _ -> 28 
  | INT _ -> 29 
  | BOOL _ -> 30 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_RPAREN 
  | 2 -> TOKEN_LPAREN 
  | 3 -> TOKEN_SEMICOLON 
  | 4 -> TOKEN_IN 
  | 5 -> TOKEN_LET 
  | 6 -> TOKEN_ELSE 
  | 7 -> TOKEN_THEN 
  | 8 -> TOKEN_IF 
  | 9 -> TOKEN_GREATER 
  | 10 -> TOKEN_LESS 
  | 11 -> TOKEN_EQUAL 
  | 12 -> TOKEN_DIV 
  | 13 -> TOKEN_MULT 
  | 14 -> TOKEN_PLUS 
  | 15 -> TOKEN_MINUS 
  | 16 -> TOKEN_SEMI_COLON 
  | 17 -> TOKEN_BACK_DASH 
  | 18 -> TOKEN_ARROW 
  | 19 -> TOKEN_DOT 
  | 20 -> TOKEN_HASH_STRING 
  | 21 -> TOKEN_HASH_PRINT 
  | 22 -> TOKEN_DOUBLE_ARROW 
  | 23 -> TOKEN_ANGLE 
  | 24 -> TOKEN_EXCL 
  | 25 -> TOKEN_LEVEL 
  | 26 -> TOKEN_STRING 
  | 27 -> TOKEN_TYPE_IDENT 
  | 28 -> TOKEN_IDENT 
  | 29 -> TOKEN_INT 
  | 30 -> TOKEN_BOOL 
  | 33 -> TOKEN_end_of_input
  | 31 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startprogram 
    | 1 -> NONTERM_program 
    | 2 -> NONTERM_term 
    | 3 -> NONTERM_term 
    | 4 -> NONTERM_simple_term 
    | 5 -> NONTERM_simple_term 
    | 6 -> NONTERM_simple_term 
    | 7 -> NONTERM_simple_term 
    | 8 -> NONTERM_simple_term 
    | 9 -> NONTERM_simple_term 
    | 10 -> NONTERM_simple_term 
    | 11 -> NONTERM_simple_term 
    | 12 -> NONTERM_simple_term 
    | 13 -> NONTERM_raw_value 
    | 14 -> NONTERM_raw_value 
    | 15 -> NONTERM_raw_value 
    | 16 -> NONTERM_labeled_value 
    | 17 -> NONTERM_labeled_value 
    | 18 -> NONTERM_constant 
    | 19 -> NONTERM_constant 
    | 20 -> NONTERM_constant 
    | 21 -> NONTERM_constant 
    | 22 -> NONTERM_raw_type 
    | 23 -> NONTERM_raw_type 
    | 24 -> NONTERM_labeled_type 
    | 25 -> NONTERM_labeled_type 
    | 26 -> NONTERM_labeled_type 
    | 27 -> NONTERM_args 
    | 28 -> NONTERM_args 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 33 
let _fsyacc_tagOfErrorTerminal = 31

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | RPAREN  -> "RPAREN" 
  | LPAREN  -> "LPAREN" 
  | SEMICOLON  -> "SEMICOLON" 
  | IN  -> "IN" 
  | LET  -> "LET" 
  | ELSE  -> "ELSE" 
  | THEN  -> "THEN" 
  | IF  -> "IF" 
  | GREATER  -> "GREATER" 
  | LESS  -> "LESS" 
  | EQUAL  -> "EQUAL" 
  | DIV  -> "DIV" 
  | MULT  -> "MULT" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | SEMI_COLON _ -> "SEMI_COLON" 
  | BACK_DASH  -> "BACK_DASH" 
  | ARROW  -> "ARROW" 
  | DOT  -> "DOT" 
  | HASH_STRING  -> "HASH_STRING" 
  | HASH_PRINT  -> "HASH_PRINT" 
  | DOUBLE_ARROW _ -> "DOUBLE_ARROW" 
  | ANGLE  -> "ANGLE" 
  | EXCL  -> "EXCL" 
  | LEVEL _ -> "LEVEL" 
  | STRING _ -> "STRING" 
  | TYPE_IDENT _ -> "TYPE_IDENT" 
  | IDENT _ -> "IDENT" 
  | INT _ -> "INT" 
  | BOOL _ -> "BOOL" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | LPAREN  -> (null : System.Object) 
  | SEMICOLON  -> (null : System.Object) 
  | IN  -> (null : System.Object) 
  | LET  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | THEN  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | GREATER  -> (null : System.Object) 
  | LESS  -> (null : System.Object) 
  | EQUAL  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | MULT  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | SEMI_COLON _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | BACK_DASH  -> (null : System.Object) 
  | ARROW  -> (null : System.Object) 
  | DOT  -> (null : System.Object) 
  | HASH_STRING  -> (null : System.Object) 
  | HASH_PRINT  -> (null : System.Object) 
  | DOUBLE_ARROW _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ANGLE  -> (null : System.Object) 
  | EXCL  -> (null : System.Object) 
  | LEVEL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | STRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | TYPE_IDENT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | IDENT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | BOOL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us;65535us;1us;65535us;0us;1us;10us;65535us;0us;2us;4us;13us;5us;13us;8us;9us;24us;14us;29us;15us;30us;16us;31us;17us;32us;18us;38us;19us;10us;65535us;0us;4us;4us;5us;5us;5us;8us;4us;24us;4us;29us;4us;30us;4us;31us;4us;32us;4us;38us;4us;10us;65535us;0us;41us;4us;41us;5us;41us;8us;39us;24us;41us;29us;41us;30us;41us;31us;41us;32us;41us;38us;41us;10us;65535us;0us;11us;4us;11us;5us;11us;8us;11us;24us;11us;29us;11us;30us;11us;31us;11us;32us;11us;38us;11us;10us;65535us;0us;33us;4us;33us;5us;33us;8us;33us;24us;33us;29us;33us;30us;33us;31us;33us;32us;33us;38us;33us;6us;65535us;20us;54us;22us;54us;27us;54us;36us;54us;51us;54us;52us;54us;6us;65535us;20us;21us;22us;23us;27us;28us;36us;37us;51us;49us;52us;50us;2us;65535us;4us;6us;5us;7us;|]
let _fsyacc_sparseGotoTableRowOffsets = [|0us;1us;3us;14us;25us;36us;47us;58us;65us;72us;|]
let _fsyacc_stateToProdIdxsTableElements = [| 1us;0us;1us;0us;4us;1us;7us;8us;9us;1us;1us;2us;2us;3us;4us;2us;3us;27us;28us;1us;3us;2us;3us;27us;3us;4us;15us;21us;4us;4us;7us;8us;9us;1us;4us;1us;5us;1us;6us;3us;7us;8us;9us;4us;7us;8us;9us;9us;4us;7us;8us;9us;10us;4us;7us;8us;9us;10us;4us;7us;8us;9us;11us;4us;7us;8us;9us;12us;4us;7us;8us;9us;14us;1us;7us;2us;7us;23us;1us;8us;2us;8us;23us;1us;9us;1us;10us;1us;10us;1us;10us;2us;10us;23us;1us;10us;1us;10us;1us;11us;1us;12us;1us;13us;1us;14us;1us;14us;1us;14us;2us;14us;23us;1us;14us;3us;15us;16us;17us;1us;15us;2us;16us;17us;1us;17us;1us;17us;1us;18us;1us;19us;1us;20us;1us;21us;1us;22us;2us;23us;23us;2us;23us;24us;1us;23us;1us;24us;1us;24us;2us;25us;26us;1us;26us;1us;26us;|]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us;2us;4us;9us;11us;14us;19us;21us;24us;28us;33us;35us;37us;39us;43us;48us;53us;58us;63us;68us;73us;75us;78us;80us;83us;85us;87us;89us;91us;94us;96us;98us;100us;102us;104us;106us;108us;110us;113us;115us;119us;121us;124us;126us;128us;130us;132us;134us;136us;138us;141us;144us;146us;148us;150us;153us;155us;|]
let _fsyacc_action_rows = 57
let _fsyacc_actionTableElements = [|9us;32768us;2us;8us;5us;25us;17us;34us;20us;31us;21us;32us;26us;46us;28us;12us;29us;45us;30us;44us;0us;49152us;4us;32768us;0us;3us;14us;24us;22us;22us;24us;20us;0us;16385us;9us;16386us;2us;8us;5us;25us;17us;34us;20us;31us;21us;32us;26us;46us;28us;12us;29us;45us;30us;44us;13us;16386us;0us;16412us;1us;16412us;2us;8us;4us;16412us;5us;25us;17us;34us;20us;31us;21us;32us;23us;16412us;26us;46us;28us;12us;29us;45us;30us;44us;0us;16387us;13us;16387us;0us;16411us;1us;16411us;2us;16411us;4us;16411us;5us;16411us;17us;16411us;20us;16411us;21us;16411us;23us;16411us;26us;16411us;28us;16411us;29us;16411us;30us;16411us;10us;32768us;1us;47us;2us;8us;5us;25us;17us;34us;20us;31us;21us;32us;26us;46us;28us;12us;29us;45us;30us;44us;4us;32768us;1us;10us;14us;24us;22us;22us;24us;20us;0us;16388us;0us;16389us;0us;16390us;3us;32768us;14us;24us;22us;22us;24us;20us;2us;16393us;22us;22us;24us;20us;4us;32768us;4us;30us;14us;24us;22us;22us;24us;20us;3us;16394us;14us;24us;22us;22us;24us;20us;3us;16395us;14us;24us;22us;22us;24us;20us;3us;16396us;14us;24us;22us;22us;24us;20us;3us;16398us;14us;24us;22us;22us;24us;20us;2us;32768us;2us;52us;27us;48us;1us;16391us;18us;51us;2us;32768us;2us;52us;27us;48us;1us;16392us;18us;51us;9us;32768us;2us;8us;5us;25us;17us;34us;20us;31us;21us;32us;26us;46us;28us;12us;29us;45us;30us;44us;1us;32768us;28us;26us;1us;32768us;16us;27us;2us;32768us;2us;52us;27us;48us;2us;32768us;11us;29us;18us;51us;9us;32768us;2us;8us;5us;25us;17us;34us;20us;31us;21us;32us;26us;46us;28us;12us;29us;45us;30us;44us;9us;32768us;2us;8us;5us;25us;17us;34us;20us;31us;21us;32us;26us;46us;28us;12us;29us;45us;30us;44us;9us;32768us;2us;8us;5us;25us;17us;34us;20us;31us;21us;32us;26us;46us;28us;12us;29us;45us;30us;44us;9us;32768us;2us;8us;5us;25us;17us;34us;20us;31us;21us;32us;26us;46us;28us;12us;29us;45us;30us;44us;0us;16397us;1us;32768us;28us;35us;1us;32768us;16us;36us;2us;32768us;2us;52us;27us;48us;2us;32768us;18us;51us;19us;38us;9us;32768us;2us;8us;5us;25us;17us;34us;20us;31us;21us;32us;26us;46us;28us;12us;29us;45us;30us;44us;2us;16400us;1us;40us;23us;42us;0us;16399us;1us;16400us;23us;42us;1us;32768us;25us;43us;0us;16401us;0us;16402us;0us;16403us;0us;16404us;0us;16405us;0us;16406us;0us;16407us;2us;32768us;1us;53us;18us;51us;2us;32768us;2us;52us;27us;48us;2us;32768us;2us;52us;27us;48us;0us;16408us;1us;16409us;23us;55us;1us;32768us;25us;56us;0us;16410us;|]
let _fsyacc_actionTableRowOffsets = [|0us;10us;11us;16us;17us;27us;41us;42us;56us;67us;72us;73us;74us;75us;79us;82us;87us;91us;95us;99us;103us;106us;108us;111us;113us;123us;125us;127us;130us;133us;143us;153us;163us;173us;174us;176us;178us;181us;184us;194us;197us;198us;200us;202us;203us;204us;205us;206us;207us;208us;209us;212us;215us;218us;219us;221us;223us;|]
let _fsyacc_reductionSymbolCounts = [|1us;2us;1us;2us;3us;1us;1us;3us;3us;3us;8us;2us;2us;1us;6us;3us;1us;3us;1us;1us;1us;2us;1us;3us;3us;1us;3us;2us;1us;|]
let _fsyacc_productionToNonTerminalTable = [|0us;1us;2us;2us;3us;3us;3us;3us;3us;3us;3us;3us;3us;4us;4us;4us;5us;5us;6us;6us;6us;6us;7us;7us;8us;8us;8us;9us;9us;|]
let _fsyacc_immediateActions = [|65535us;49152us;65535us;16385us;65535us;65535us;16387us;65535us;65535us;65535us;16388us;16389us;16390us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;16397us;65535us;65535us;65535us;65535us;65535us;65535us;16399us;65535us;65535us;16401us;16402us;16403us;16404us;16405us;16406us;65535us;65535us;65535us;65535us;16408us;65535us;65535us;16410us;|]
let _fsyacc_reductions = lazy [|
# 287 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Term in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startprogram));
# 296 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_term in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "Parser.fsy"
                                      _1 
                   )
# 55 "Parser.fsy"
                 : Term));
# 307 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_simple_term in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "Parser.fsy"
                                              _1 
                   )
# 58 "Parser.fsy"
                 : 'gentype_term));
# 318 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_simple_term in
            let _2 = parseState.GetInput(2) :?> 'gentype_args in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "Parser.fsy"
                                              mkApply _1 _2 
                   )
# 59 "Parser.fsy"
                 : 'gentype_term));
# 330 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_term in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "Parser.fsy"
                                                _2 
                   )
# 62 "Parser.fsy"
                 : 'gentype_simple_term));
# 341 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_labeled_value in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "Parser.fsy"
                                                TermValue _1 
                   )
# 63 "Parser.fsy"
                 : 'gentype_simple_term));
# 352 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "Parser.fsy"
                                                TermVariable _1 
                   )
# 64 "Parser.fsy"
                 : 'gentype_simple_term));
# 363 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_term in
            let _3 = parseState.GetInput(3) :?> 'gentype_labeled_type in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "Parser.fsy"
                                                    TermClassification (_1, _3) 
                   )
# 65 "Parser.fsy"
                 : 'gentype_simple_term));
# 375 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_term in
            let _2 = parseState.GetInput(2) :?> Syntax.Position in
            let _3 = parseState.GetInput(3) :?> 'gentype_labeled_type in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "Parser.fsy"
                                                            TermCast (_1, _2, _3) 
                   )
# 66 "Parser.fsy"
                 : 'gentype_simple_term));
# 388 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_term in
            let _3 = parseState.GetInput(3) :?> 'gentype_term in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "Parser.fsy"
                                            TermOperation (Add, [_1; _3]) 
                   )
# 67 "Parser.fsy"
                 : 'gentype_simple_term));
# 400 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> Syntax.Position in
            let _4 = parseState.GetInput(4) :?> 'gentype_labeled_type in
            let _6 = parseState.GetInput(6) :?> 'gentype_term in
            let _8 = parseState.GetInput(8) :?> 'gentype_term in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "Parser.fsy"
                               TermApply (TermValue (LabeledValue (RawVLambda (_2, _4, _8), G)), _6) 
                   )
# 69 "Parser.fsy"
                 : 'gentype_simple_term));
# 415 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_term in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "Parser.fsy"
                                              TermOperation (ToStr, [_2]) 
                   )
# 70 "Parser.fsy"
                 : 'gentype_simple_term));
# 426 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_term in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "Parser.fsy"
                                             TermOperation (Print, [_2]) 
                   )
# 71 "Parser.fsy"
                 : 'gentype_simple_term));
# 437 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Constant in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "Parser.fsy"
                                      RawVConstant _1 
                   )
# 74 "Parser.fsy"
                 : 'gentype_raw_value));
# 448 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> Syntax.Position in
            let _4 = parseState.GetInput(4) :?> 'gentype_labeled_type in
            let _6 = parseState.GetInput(6) :?> 'gentype_term in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "Parser.fsy"
                                                                              RawVLambda (_2, _4, _6) 
                   )
# 75 "Parser.fsy"
                 : 'gentype_raw_value));
# 462 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_raw_value in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "Parser.fsy"
                                                     _2 
                   )
# 76 "Parser.fsy"
                 : 'gentype_raw_value));
# 473 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_raw_value in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 79 "Parser.fsy"
                                                   LabeledValue (_1, L) 
                   )
# 79 "Parser.fsy"
                 : 'gentype_labeled_value));
# 484 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_raw_value in
            let _3 = parseState.GetInput(3) :?> SecurityLevel in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 80 "Parser.fsy"
                                                   LabeledValue (_1, _3) 
                   )
# 80 "Parser.fsy"
                 : 'gentype_labeled_value));
# 496 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> bool in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "Parser.fsy"
                                           ConstantBool _1 
                   )
# 83 "Parser.fsy"
                 : Constant));
# 507 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "Parser.fsy"
                                           ConstantInt _1 
                   )
# 84 "Parser.fsy"
                 : Constant));
# 518 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 85 "Parser.fsy"
                                           ConstantString _1 
                   )
# 85 "Parser.fsy"
                 : Constant));
# 529 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "Parser.fsy"
                                           ConstantUnit 
                   )
# 86 "Parser.fsy"
                 : Constant));
# 539 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "Parser.fsy"
                                        RawTBase (stringToBaseType _1) 
                   )
# 89 "Parser.fsy"
                 : 'gentype_raw_type));
# 550 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_labeled_type in
            let _3 = parseState.GetInput(3) :?> 'gentype_labeled_type in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "Parser.fsy"
                                                             RawTArrow (_1, _3) 
                   )
# 90 "Parser.fsy"
                 : 'gentype_raw_type));
# 562 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_labeled_type in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 93 "Parser.fsy"
                                                        _2 
                   )
# 93 "Parser.fsy"
                 : 'gentype_labeled_type));
# 573 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_raw_type in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 94 "Parser.fsy"
                                                        LabeledType (_1, G) 
                   )
# 94 "Parser.fsy"
                 : 'gentype_labeled_type));
# 584 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_raw_type in
            let _3 = parseState.GetInput(3) :?> SecurityLevel in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 95 "Parser.fsy"
                                                        LabeledType (_1, _3) 
                   )
# 95 "Parser.fsy"
                 : 'gentype_labeled_type));
# 596 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_simple_term in
            let _2 = parseState.GetInput(2) :?> 'gentype_args in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 98 "Parser.fsy"
                                                _1 :: _2 
                   )
# 98 "Parser.fsy"
                 : 'gentype_args));
# 608 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_simple_term in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 99 "Parser.fsy"
                                                [_1] 
                   )
# 99 "Parser.fsy"
                 : 'gentype_args));
|]
# 620 "Parser.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions = _fsyacc_reductions.Value;
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 34;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let program lexer lexbuf : Term =
    engine lexer lexbuf 0 :?> _
